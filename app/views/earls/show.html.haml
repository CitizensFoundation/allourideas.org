/ %h2== #{t('questions.question')}: "#{@question}", #{@votes_count} #{t('questions.votes')}, #{@items_count} #{t('questions.active_items')}
/ 
/ %h3= link_to(t('questions.voting_page'), @named_url)
/ %h3= link_to t('questions.export_item_votes'), "export_question_path(@id)"
/ %p
/   == #{t('questions.current_short_url')}: #{link_to(@question_internal.name, @named_url)}
/   == (#{link_to(t('questions.edit'), edit_question_path(@question_internal.id))})
/ = render :partial => 'items/list' if (@items)
/ %h3= link_to t('questions.list_questions'), questions_path
/ = render :partial => 'shared/vote_map'

-@item_data, @item_ids = [], []
= render :partial => 'shared/header_vote'

.votebox
  %table.full
    %tr
      %td{:colspan => 3}= rounded(@question.attributes['name'], 'border')
    %tr.prompt.prompter
      %td.half.idea.left.vote_cell{:rel => @question.id, :id => "left_choice_cell"}
        = rounded(render(:partial => 'questions/idea', :locals => {:data => @left_choice_text, :side => "leftside", :choice_id => @left_choice_id}), 'round-filled')
      %td
      %td.idea.right.vote_cell{:rel => @question.id, :id => "right_choice_cell"}
        = rounded(render(:partial => 'questions/idea', :locals => {:data => @right_choice_text, :side => "rightside", :choice_id => @right_choice_id}), 'round-filled')
  %table.vote-footer
    %tr
      //%td.feedback= link_to(t('nav.feedback'), quick_link('vote/feedback', "#"))
      %td.skip=# link_to(t('vote.skip'), "#", :class => "skiplink", :rel => @question.id)
      - ab_test(@ab_test_name, %w{sixteen_pixel_font twelve_pixel_font}, :conversion => 'voted') do |theClass|
        %td{:class => theClass}
          ="<span id='votes_count'>#{@votes_count}</span> #{t('common.votes_on')} <span id='item_count'>#{@item_count}</span> #{t('common.ideas')}"
  .clear
  %center
    = render :partial => 'items/form', :locals => {:the_ab_test_name => @ab_test_ideas_text_name}
    %br
    #indicator.indicator{:style => "display:none;"}= image_tag('indicator.gif')
    .tellmearea
      -ab_test(@ab_test_showme_name, %w{control makechoice_small makechoice_large pleaseclick_small pleaseclick_large}) do |thechoice|
        -case thechoice
        - when "control"
          &nbsp;
        - when "makechoice_small"
          .sixteen_pixel_font Make your choice and see what comes next
        - when "makechoice_large"
          .twenty_pixel_font Make your choice and see what comes next
        - when "pleaseclick_small"
          .sixteen_pixel_font Please click on your choice
        - when "pleaseclick_large"
          .twenty_pixel_font Please click on your choice
      -if @winner
        -if @skip
          == #{t('vote.you_skipped_both')} #{link_to(@winner, item_path(@winner_id, :question_id => @question_id))} #{t('common.and')} #{link_to(@loser, item_path(@loser_id, :question_id => @question_id))}
        -else
          == #{t('vote.you_chose')} #{link_to(@winner, item_path(@winner_id, :question_id => @question_id))} #{t('vote.over')} #{link_to(@loser, item_path(@loser_id, :question_id => @question_id))}.
      -elsif flash[:v_notice]
        %p.vote-notice#v_notice= flash[:v_notice]
        = javascript_tag "setTimeout(function() { $('#v_notice').fadeOut(1000); }, 3000);"
      -elsif flash[:v_error]
        %p.error#v_error= flash[:v_error]
        = javascript_tag "setTimeout(function() { $('#v_error').fadeOut(1000); }, 3000);"
      %p.error#length_error{:style => "display:none"}== #{t('items.new.too_long')} #{Const::MAX_ITEM_LENGTH} #{t('common.characters')}.


-content_for :view_javascript do
  :plain
    set_focus_and_blur_events = function() {
      $('#new_idea_field').focus( function () {
        var str = $('#submit_btn').attr("src");
        $('#submit_btn').attr('src', str.replace(".jpg", "-focus.jpg"));
      });
      $('#new_idea_field').blur( function () {
        var str = $('#submit_btn').attr("src");
        $('#submit_btn').attr('src', str.replace("-focus.jpg", ".jpg"));
      });
    };
    set_focus_and_blur_events();
    $('.new_idea_submit').bind('click',function(event){		
      var new_idea = $('#new_idea_field').val();
      var default_text = $('#default_text').val()
      $('.example_notice').hide();
      
      //if new idea is blank or longer than 140 characters, do not allow it to submit
      if ((new_idea == 'Add your own idea here...') || (new_idea == '') || new_idea == default_text) {
        event.returnValue = false;
        alert('Sorry, blank ideas are not allowed.');
        return false;
      }
      if (new_idea.length > 140) {
        alert('Sorry, ideas need to be less than 140 characters.');
        event.returnValue = false;
        return false;
      }
		
      $.setFragment({ "page" : $.queryString(this.href).page });
      $('.indicator').show();
      $.blockUI({ message: null, fadeIn: 0, fadeOut:  0, overlayCSS:  { 
        backgroundColor: '#000', 
        opacity:         0.0,
        cursor:    null
        }});
      var question_id = $(this).attr("rel");
		
      $.post('/questions/' + question_id + '/add_idea.js',
        'authenticity_token='+encodeURIComponent(AUTH_TOKEN)+'&new_idea='+new_idea,
        function(data){
          $('.tellmearea').html(data["message"]);
          $('#new_idea_field').val("");
          thankyoutext = 'Thank you. Your idea has been added. Please add some more ideas.';
          $('#new_idea_field').attr('title', thankyoutext);
          $('#default_text').val(thankyoutext);
          $('#new_idea_field').unbind('focus').unbind('blur');
          $('#new_idea_field').hint();
          set_focus_and_blur_events();
        
          if (data['choice_status'] == 'active') {
            current_item_count = $('#item_count').html();
            $('#item_count').html(increment(current_item_count)).effect("highlight", {}, 1500);
          }
          $('.indicator').hide();
          $.unblockUI();
          
          var str = $("#submit_btn").attr("src");
          $("#submit_btn").attr('src', "/images/submit.jpg");
        },
        "json"
      );
      return false;
    });
