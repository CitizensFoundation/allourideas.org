= render :partial => 'shared/header_vote'
.ninety
  %table.full
    %tr.row0
      %th
        = @question.attributes['name']
      %th.score= (@header_text = "Status")
      %th &nbsp;
    -alt=false
    -for choice in @choices.sort_by {|x| [(!!x.attributes['active']).to_s, x.data]}
      %tr{:class => "row#{(alt = !alt) ? 1 : 2}"}
        %td.title= link_to truncate(h(choice.data), :length => 137), choice.path
        %td.votes{:id => "choice_#{choice.id}_status"}= choice.active? ? 'Activated' : 'Deactivated'
        -#%td= rank
        -#%td= added
        %td
          -unless @choices.size < 3
            =link_to('[Toggle]', '#', :class => 'toggle_choice_status', :rel => choice.id, :earl_id => @earl.id)
    %tr.row0.thin
      %td{:colspan => 3}
  %br

  %table.full
    %tr.row0
      %th="Data Visualizations"
      %th.score &nbsp;
    %tr.row1#view_voter_map_row
      %td.title="World map of votes"
      %td.votes 
        = link_to('[View]', url_for(:action => :voter_map), :id => "view_voter_map", :iframe_url=> url_for(:action => :voter_map))
    -if current_user.admin? && @available_charts
      -@available_charts.each do |type, options|
        %tr{:class => cycle("row2", "row1")}
          %td.title= options[:title]
          %td.votes
            = link_to('[View]', url_for(:action => :timeline_graph, :type => type), :class => 'date-chart')
        %tr{:class => current_cycle }
          %td.title{:colspan => '2'}
            .chart-container{:id => "#{type}-chart-container"}
      %tr.row1
        %td.title= "Word cloud of ideas"
        %td.votes
          = link_to('[View]', url_for(:action => :word_cloud), :class => 'date-chart')
      %tr.row1
        %td{:colspan => '2'}
          .wcdiv#wcdiv


    -#%tr.row1
      %td
        %iframe{:src => "#{url_for(:action => :voter_map)}", :width=> "600px", :height => "400px", :frameborder => "0", :scrolling => "no"}}
      %td &nbsp;
  %p
    ="This question created #{time_ago_in_words(@earl.created_at)} ago"
  
  %table.full
    %tr.row0
      %th
        = "Optional Question Settings"
      %th.score= "Status"
      %th &nbsp;
    %tr.row1
      %td.title= "Allow ideas by users to be automatically activated, without prior approval"
      %td.votes{:id => "question_#{@question.id}_autoactivate_status"}= @question.it_should_autoactivate_ideas? ? 'Enabled' : 'Disabled'
      %td=link_to('[Toggle]', '#', :class => 'toggle_autoactivate_status', :question_id => @question.id)
  %h2
    More Settings:
  -form_for :earl, @earl, :url => { :action => "update" }, :html => {:method => :put, :multipart => true} do |f|
    %p 
      Require users to enter the following user/password combination before voting: 
      %br
      -# = f.label :name, "Username" - Disappears off screen for some reason
      = "Username: #{@earl.name}"
      -# = f.label :pass, "Password" - Disappares off screen for some reason
      %br
      = f.label :pass, "Password:"
      = f.text_field :pass
    %p 
      -if @earl.logo_file_name
        Replace logo above with another file:
      -else
        Upload a logo to be displayed on your idea market place page
      %br
      = f.file_field :logo
    %p
      = submit_tag "Save"
  -if @earl.logo_file_name
    =button_to("Delete existing logo", {:action => :delete_logo}, :method => :delete)
    %br

  -if current_user.admin?
    %table.full
      %tr.row0
        %th= "Download Idea Marketplace Data"
        %th &nbsp;
        %th &nbsp;
      %tr.row1
        %td.title= "List of Ideas CSV"
        %td &nbsp;
        %td
          =# link_to('[Download]', :url => "#{API_HOST}/questions/#{@question.id}/export", :method => :post, :params => {:type => :items}
          = link_to('[Download]', :action => :export, :params => {:type => :items})
      %tr.row2
        %td.title= "List of Votes CSV"
        %td &nbsp;
        %td
          = link_to('[Download]', :action => :export, :params => {:type => :votes})
      
    
  #explanation{:style => 'display:none;'}
    %h2= t('items.about_scoring')
    =t('items.score_explain')

  - content_for :view_javascript do
    =# @votes_chart
    =# @word_cloud_js

