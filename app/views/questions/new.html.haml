.row.fluid
  .span12
    %h2= t('questions.new.header')

    %p
      = t('questions.new.exp')
      = link_to(t('questions.new.see_an'), "/test-space-worms")
      = t('questions.new.exp2')
    - if !logged_in?
      %p
        = ( "#{t('questions.new.if_you_have_an_account')} " + link_to(t('questions.new.here'), sign_in_path).html_safe + '.').html_safe
    .left.create-question
      =form_for @question, :url => questions_path, :html => {:id => 'new_question_form'} do |f|
        %p
          = #f.error_messages :header_message => "#{@question.errors.length} #{t('questions.new.error.header')}"
          - if @user && @user.errors.any?
            #errorExplanation.errorExplanation
              %h2=t('questions.new.error.registration')
              %br
              %ul
                -@user.errors.each do |error|
                  - if error.attribute =~ /Email/i && error.message =~ /has already been taken/i
                    %li= t('questions.new.error.already_taken') + " " + link_to(t('questions.new.error.already_taken_link'), '/sign_in')
                  - else
                    %li= "#{error.message}".capitalize

        %fieldset#step1
          %legend= t('questions.new.step1')
          .control-group
            %label.control-label{:for => 'question_name'}
              = "#{t('questions.new.display_text')}:"
            .controls
              = f.text_field 'name', :size => 60, :placeholder => t('questions.new.step1_exp'), :class => 'required span8', :maxlength => Const::MAX_QUESTION_LENGTH
            = hidden_field_tag 'default_text', t('questions.new.step1_exp')

        %fieldset#step2
          %legend= t('questions.new.step2')
          .control-group
            .input-prepend
              %label.add-on{:for => "question_url"}= "https://#{ENV["HOST"]}/"
              = f.text_field 'url', :id=>"question_url", :class => 'required span4', :placeholder => (@question && @question.url) || t('questions.new.step2_exp')
            = hidden_field_tag 'default_text2', t('questions.new.step2_exp')


        %fieldset#step3
          %legend= t('questions.new.step3')
          .control-group
            %label.control-label{:for => "question_ideas"}
              = t('questions.new.step3_ist')
              = t('questions.new.step3_ist2')
              == #{t('questions.new.step3_ist3')} #{Const::MAX_ITEM_LENGTH} #{t('common.characters')}.

            .controls
              = f.text_area 'ideas', :class => 'required span8', :style => "width: 100%",:cols => 85, :rows => 12, :placeholder => t('questions.new.step3_exp')
            - if ENV['OPENAI_API_KEY'].present?
              %div.button-spinner-container
                %button#ai-ideas-button.btn.btn-primary{:type => "button"}
                  = t('questions.new.generate_answer_ideas_with_artificial_intelligence')
                %div#ai-ideas-spinner.spinner{style: "display:none;"}
          = hidden_field_tag 'default_text3', t('questions.new.step3_exp')

        %fieldset#step3_5
          %legend= t('questions.new.step3_5')
          .control-group
            = label_tag :welcome_message, ("Welcome message (300 characters max)" + link_to('<i class="glyphicon glyphicon-question-sign"></i>'.html_safe, '#welcome_msg_explanation', :"data-toggle" => 'modal')).html_safe, :class => 'control-label'
            .controls
              = text_area_tag :welcome_message,  @welcome_message, :rows => 5, :cols => 65, :max=> 350, :class => 'input-xxlarge'

          .control-group
            = label_tag :welcome_html, ("Welcome Footer HTML"), :class => 'control-label'
            .controls
              = text_area_tag :welcome_html, @welcome_html, :rows => 5, :cols => 65, :class => 'input-xxlarge'

          .control-group
            = label_tag :logo_url, ("Logo URL (864 x 486px)"), :class => 'control-label'
            .controls
              = text_field_tag :logo_url, @logo_url, :size=> 30, :class => 'input-xxlarge'

          .control-group
            = label_tag :target_votes, ("Number of target votes per user"), :class => 'control-label'
            .controls
              = text_field_tag :target_votes, @target_votes || "30"

          .control-group
            = label_tag :theme_color, ("The primary theme color"), :class => 'control-label'
            .controls
              = text_field_tag :theme_color, @theme_color || "#0489CF"

          .control-group
            = label_tag :analysis_config, ("AI GPT-4 Analysis Config (Paste JSON Here)"), :class => 'control-label'
            .controls{:style => "position: relative;"}
              = text_area_tag :analysis_config, @analysis_config, :rows => 5, :cols => 65, :class => 'input-xxlarge', :id => 'analysis_config'
              .error-message{:style => "margin-top: 4px;position: absolute; top: 100%; left: 0; right: 0; text-align: center; color: #F00;"}
                %span#json-error-message

        -unless signed_in?

          %fieldset#step4
            %legend= t('questions.new.step4')
            %p
              = t('questions.new.new_account_exp')

            .control-group
              %label.control-label{:for => "question_email"}= "#{t('user.email')}:"
              .controls
                = f.text_field 'email', :size => 30, :class => 'required email span8', :maxlength => Const::MAX_QUESTION_LENGTH

            .control-group
              %label.control-label{:for => "question_password"}= "#{t('user.password')}:"
              .controls
                = f.password_field 'password', :class => 'password required span8', :size => 20

        %fieldset#step5
          -if signed_in?
            %legend= "Step 4 [#{t('questions.new.optional')}]: #{t('questions.new.help_us_out')}"
          -else
            %legend= "Step 5 [#{t('questions.new.optional')}]: #{t('questions.new.help_us_out')}"
          .control-group
            %label.control-label{:for => "question_information"}
              = t('questions.new.tell_us_why')
              = t('questions.new.tell_us_why2')
            .controls
              = f.text_area 'information', :class => 'span8', :cols => 85, :rows => 12

        .form-actions
          %button#question_create_button.btn.btn-large.btn-primary{:type => "submit"}
            = t('form.create')


    #indicator.indicator{:style => "display:none;"}= image_tag('indicator.gif')

-content_for :view_javascript do
  :plain
    $('#new_question_form').submit(function(){
      $('#indicator').show();
    });

:javascript
  $(document).ready(function() {
    $('#analysis_config').on('change', function() {
      var analysisConfig = $(this).val();
      try {
        JSON.parse(analysisConfig);
        $('#json-error-message').text('');
      } catch(e) {
        $('#json-error-message').text('Invalid JSON').css('color', '#F00');      }
    });

    $('#question_url').on('keypress', function(e) {
      var key = e.which || e.keyCode;
      var char = String.fromCharCode(key);
      // Check if the input is a space or a slash
      if (/[ \/?&"'<>#%{}|\\^~[\],.]/.test(char)) {
        e.preventDefault(); // Prevent the input
      }
    });
  });
